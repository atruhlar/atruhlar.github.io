dir <- "/Volumes/AMT/Ecoli_sequencing/"
setwd(dir)
library(data.table)
all_gaps <- read.csv(paste(dir,"CLC_coverage_files_denHoeke_random_mapping/annotated_gaps.csv",sep=""))
all_gaps <- na.omit(all_gaps)
gaps_by_strain <- data.frame(table(all_gaps$strain, all_gaps$annotation))
# Reassign week and treatment info to strains
naming_key <- read.csv(paste(dir,"Naming_key.csv",sep=""))
# Remove NAs from naming key
naming_key <- na.omit(naming_key)
naming_key$Week <- as.character(naming_key$Week)
# Remove blanks from naming key
naming_key <- naming_key[naming_key$Treatment != "NA",]
# Remove isolate SWL0011 (low coverage)
naming_key <- naming_key[naming_key$Final.name != "SWL0011",]
naming_key$Final.name <- as.character(droplevels(naming_key$Final.name))
# Make empty week and treatment columns in the gaps_by_strain dataframe
gaps_by_strain$Week <- as.character("NA")
gaps_by_strain$Treatment <- as.character("NA")
# Label strains in the all_SNP file with week and treatment information
for (i in 1:nrow(naming_key)){
for (j in 1:nrow(gaps_by_strain)){
if (gaps_by_strain$Var1[j] == naming_key$Final.name[i]){
gaps_by_strain$Week[j] <- naming_key$Week[i]
gaps_by_strain$Treatment[j] <- as.character(naming_key$Treatment[i])
}
}
}
gaps_by_strain$WeekTreat <- paste("Week ",gaps_by_strain$Week, ", ", gaps_by_strain$Treatment, sep="")
genes <- unique(gaps_by_strain$Var2)
for (i in 1:length(genes)){
subset <- gaps_by_strain[(gaps_by_strain$Var2==genes[i]),]
hist(subset$Freq)
model <- glm(Freq ~ WeekTreat, family = poisson, data = subset)
results <- summary(model)
coeffs <- as.data.frame(results$coefficients)
temp_coeffs <- setDT(coeffs,keep.rownames=TRUE)
gene <- rep(genes[i], nrow(temp_coeffs))
temp_coeffs <- cbind(gene, temp_coeffs)
null_dev <- rep(results$null.deviance, nrow(temp_coeffs))
null_df <- rep(results$df.null, nrow(temp_coeffs))
resid_dev <- rep(results$deviance, nrow(temp_coeffs))
resid_df <- rep(results$df.residual, nrow(temp_coeffs))
temp_coeffs <- cbind (temp_coeffs, null_dev, null_df, resid_dev, resid_df)
if (exists("updated_coeffs")==TRUE) {
updated_coeffs <- rbind(updated_coeffs,temp_coeffs)
} else {
updated_coeffs <- temp_coeffs
}
}
View(coeffs)
View(updated_coeffs)
install.packages("sensitivity")
# Test case : the non-monotonic function of Morris
x <- morris(model = morris.fun, factors = 20, r = 4,
design = list(type = "oat", levels = 5, grid.jump = 3))
library(sensitivity)
# Test case : the non-monotonic function of Morris
x <- morris(model = morris.fun, factors = 20, r = 4,
design = list(type = "oat", levels = 5, grid.jump = 3))
print(x)
plot(x)
x
?morris.fun
x$X
x$y
# Test case : the non-monotonic function of Morris
x <- morris(model = NULL, factors = 20, r = 4,
design = list(type = "oat", levels = 5, grid.jump = 3))
x$y
x$X
# Test case : the non-monotonic function of Morris
x <- morris(model = NULL, factors = 5, r = 4,
design = list(type = "oat", levels = c(3,51,2,2,16), grid.jump = 1))
x$X
# Test case : the non-monotonic function of Morris
x <- morris(model = NULL, factors = 5, r = 4,
design = list(type = "oat", levels = c(3,51,2,2,16), grid.jump = 1), scale=FALSE)
x$X
# Test case : the non-monotonic function of Morris
x <- morris(model = NULL, factors = 5, r = 4,
design = list(type = "oat", levels = c(3,51,2,2,16), grid.jump = 1), scale=TRUE)
x$X
# Test case : the non-monotonic function of Morris
x <- morris(model = NULL, factors = 5, r = 4,
design = list(type = "oat", levels = c(3,51,2,2,16), grid.jump = 1), binf = c(1, 0, 0, 0, 0.05), bsup = c(10, 50, 1, 1, 0.2),scale=TRUE)
x$X
# Test case : the non-monotonic function of Morris
x <- morris(model = NULL, factors = 5, r = 50,
design = list(type = "oat", levels = c(3,51,2,2,16), grid.jump = 1), binf = c(1, 0, 0, 0, 0.05), bsup = c(10, 50, 1, 1, 0.2),scale=TRUE)
x$X
# Test case : the non-monotonic function of Morris
x <- morris(model = NULL, factors = 5, r = 50,
design = list(type = "oat", levels = c(3,51,2,2,16), grid.jump = 1), binf = c(1, 0, 0, 0, 0.05), bsup = c(10, 50, 1, 1, 0.2),scale=FALSE)
x$X
tell(x)
?tell
#Set our working directory.
#This helps avoid confusion if our working directory is
#not our site because of other projects we were
#working on at the time.
setwd("/Users/atruhlar/Dropbox/IO_Website/io_site")
#render your sweet site.
rmarkdown::render_site()
#render your sweet site.
rmarkdown::render_site()
#render your sweet site.
rmarkdown::render_site()
#render your sweet site.
rmarkdown::render_site()
#render your sweet site.
rmarkdown::render_site()
#render your sweet site.
rmarkdown::render_site()
#render your sweet site.
rmarkdown::render_site()
#render your sweet site.
rmarkdown::render_site()
#render your sweet site.
rmarkdown::render_site()
#render your sweet site.
rmarkdown::render_site()
#render your sweet site.
rmarkdown::render_site()
#render your sweet site.
rmarkdown::render_site()
#render your sweet site.
rmarkdown::render_site()
#render your sweet site.
rmarkdown::render_site()
#Set our working directory.
#This helps avoid confusion if our working directory is
#not our site because of other projects we were
#working on at the time.
setwd("/Users/atruhlar/Dropbox/IO_Website/io_site")
#render your sweet site.
rmarkdown::render_site()
#render your sweet site.
rmarkdown::render_site()
#render your sweet site.
rmarkdown::render_site()
#render your sweet site.
rmarkdown::render_site()
#render your sweet site.
rmarkdown::render_site()
#render your sweet site.
rmarkdown::render_site()
#render your sweet site.
rmarkdown::render_site()
#render your sweet site.
rmarkdown::render_site()
#render your sweet site.
rmarkdown::render_site()
#render your sweet site.
rmarkdown::render_site()
#render your sweet site.
rmarkdown::render_site()
#Set our working directory.
#This helps avoid confusion if our working directory is
#not our site because of other projects we were
#working on at the time.
setwd("/Users/atruhlar/Dropbox/IO_Website/io_site")
#render your sweet site.
rmarkdown::render_site()
#render your sweet site.
rmarkdown::render_site()
#render your sweet site.
rmarkdown::render_site()
#render your sweet site.
rmarkdown::render_site()
#render your sweet site.
rmarkdown::render_site()
#render your sweet site.
rmarkdown::render_site()
#render your sweet site.
rmarkdown::render_site()
#render your sweet site.
rmarkdown::render_site()
#render your sweet site.
rmarkdown::render_site()
#render your sweet site.
rmarkdown::render_site()
#render your sweet site.
rmarkdown::render_site()
#render your sweet site.
rmarkdown::render_site()
#render your sweet site.
rmarkdown::render_site()
